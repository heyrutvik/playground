#lang pie

(claim +
  (-> Nat Nat Nat))
(define +
  (lambda (n m)
    (iter-Nat n
      m
      (lambda (+-so-far)
        (add1 +-so-far)))))

(claim double
  (-> Nat Nat))
(define double
  (lambda (n)
    (iter-Nat n
      0
      (+ 2))))

(claim Even
  (-> Nat U))
(define Even
  (lambda (n)
    (Sigma ((a Nat))
      (= Nat n (double a)))))

(claim zero-is-even
  (Even zero))
(define zero-is-even
  (cons 0 (same 0)))

(claim Odd
  (-> Nat U))
(define Odd
  (lambda (n)
    (Sigma ((a Nat))
      (= Nat n (add1 (double a))))))

(claim one-is-odd
  (Odd (add1 zero)))
(define one-is-odd
  (cons 0 (same 1)))

(claim thirteen-is-odd
  (Odd 13))
(define thirteen-is-odd
  (cons 6 (same 13)))

(claim even-add1->odd
  (Pi ((n Nat))
    (-> (Even n)
        (Odd (add1 n)))))
(define even-add1->odd
  (lambda (n)
    (lambda (en)
      (cons
        (car en)
        (cong (cdr en) (+ 1))))))

(claim odd-add1->even
  (Pi ((n Nat))
    (-> (Odd n)
        (Even (add1 n)))))
(define odd-add1->even
  (lambda (n on)
    (cons
      (add1 (car on))
      (cong (cdr on) (+ 1)))))
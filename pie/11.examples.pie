#lang pie

(claim +
  (-> Nat Nat Nat))
(define +
  (lambda (n m)
    (iter-Nat n
      m
      (lambda (+-so-fat)
        (add1 +-so-fat)))))

(claim mot-vec-append
  (Pi ((E U) (m Nat) (n Nat))
    (-> (Vec E n) U)))
(define mot-vec-append
  (lambda (E m n)
    (lambda (v)
      (Vec E (+ n m)))))

(claim step-vec-append
  (Pi ((E U) (m Nat) (n Nat) (v E) (vs (Vec E n)))
    (-> (mot-vec-append E m n vs)
        (mot-vec-append E m (add1 n) (vec:: v vs)))))
(define step-vec-append
  (lambda (E m n v vs)
    (lambda (vec-append-so-far)
      (vec:: v vec-append-so-far))))
    

(claim vec-append
  (Pi ((E U)
       (n Nat)
       (m Nat))
    (-> (Vec E n) (Vec E m)
        (Vec E (+ n m)))))
(define vec-append
  (lambda (E n m)
    (lambda (v1 v2)
      (ind-Vec n v1
        (mot-vec-append E m)
        v2
        (step-vec-append E m)))))

;; vector to list
(claim mot-vec->list
  (Pi ((E U) (n Nat))
    (-> (Vec E n) U)))
(define mot-vec->list
  (lambda (E n vs)
    (List E)))

(claim step-vec->list
  (Pi ((E U) (n Nat))
    (-> E (Vec E n) (List E)
        (List E))))
(define step-vec->list
  (lambda (E n)
    (lambda (v vs vec->list-so-far)
      (:: v vec->list-so-far))))

(claim vec->list
  (Pi ((E U) (n Nat))
    (-> (Vec E n)
        (List E))))
(define vec->list
  (lambda (E n)
    (lambda (vs)
      (ind-Vec n vs
        (mot-vec->list E)
        nil
        (step-vec->list E)))))

;; copy/paste from 10.examples.pie
(claim length
  (Pi ((E U))
    (-> (List E) Nat)))
(define length
  (lambda (E es)
    (rec-List
      es
      zero
      (lambda (x xs length-so-far)
        (add1 length-so-far)))))

(claim mot-list->vec
  (Pi ((E U))
    (-> (List E) U)))
(define mot-list->vec
  (lambda (E es)
    (Vec E (length E es))))

(claim step-list->vec
  (Pi ((E U) (e E) (es (List E)))
    (-> (mot-list->vec E es)
        (mot-list->vec E (:: e es)))))
(define step-list->vec
  (lambda (E e es list->vec-so-far)
    (vec:: e list->vec-so-far)))

(claim list->vec
  (Pi ((E U) (es (List E)))
    (Vec E (length E es))))
(define list->vec
  (lambda (E es)
    (ind-List
      es
      (mot-list->vec E)
      vecnil
      (step-list->vec E))))

;; prove that definition of list->vec is not foolish

(claim mot-list->vec->list=
  (Pi ((E U))
    (-> (List E) U)))
(define mot-list->vec->list=
  (lambda (E es)
    (= (List E) es (vec->list E (length E es) (list->vec E es)))))

(claim base-list->vec->list=
  (Pi ((E U))
    (mot-list->vec->list= E nil)))
(define base-list->vec->list=
  (lambda (E)
    (same nil)))

(claim ::-in-so-far
  (Pi ((E U))
    (-> E (List E) (List E))))
(define ::-in-so-far
  (lambda (E e es)
    (:: e es)))
  
(claim step-list->vec->list=
  (Pi ((E U) (e E) (es (List E)))
    (-> (mot-list->vec->list= E es)
        (mot-list->vec->list= E (:: e es)))))
(define step-list->vec->list=
  (lambda (E e es)
    (lambda (list->vec->list=-proof)
      (cong list->vec->list=-proof (::-in-so-far E e)))))

(claim list->vec->list=
  (Pi ((E U)
       (es (List E)))
    (= (List E)
       es
       (vec->list E (length E es) (list->vec E es)))))
(define list->vec->list=
  (lambda (E es)
    (ind-List es
      (mot-list->vec->list= E)
      (base-list->vec->list= E)
      (step-list->vec->list= E))))
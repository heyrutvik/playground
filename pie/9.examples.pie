#lang pie

(claim +
  (-> Nat Nat Nat))
(define +
  (lambda (n m)
    (iter-Nat
      n
      m
      (lambda (+-so-far)
        (add1 +-so-far)))))

(claim twice
  (-> Nat Nat))
(define twice
  (lambda (n)
    (+ n n)))

(claim double
  (-> Nat Nat))
(define double
  (lambda (n)
    (iter-Nat
      n
      0
      (+ 2))))

(claim mot-add1+=+add1
  (-> Nat Nat U))
(define mot-add1+=+add1
  (lambda (j n)
    (= Nat (add1 (+ n j)) (+ n (add1 j)))))

(claim step-add1+=+add1
  (Pi ((k Nat) (n-1 Nat))
    (-> (= Nat (add1 (+ n-1 k)) (+ n-1 (add1 k)))
        (= Nat (add1 (add1 (+ n-1 k))) (add1 (+ n-1 (add1 k)))))))
(define step-add1+=+add1
  (lambda (k n-1)
    (lambda (add1+=+add1-so-far)
      (cong add1+=+add1-so-far (+ 1)))))

(claim add1+=+add1
  (Pi ((n Nat)(m Nat))
    (= Nat (add1 (+ n m)) (+ n (add1 m)))))
(define add1+=+add1
  (lambda (n m)
    (ind-Nat
      n
      (mot-add1+=+add1 m)
      (same (add1 m))
      (step-add1+=+add1 m))))

(claim mot-twice=double
  (-> Nat U))
(define mot-twice=double
  (lambda (n)
    (= Nat (twice n) (double n))))

(claim mot-replace
  (-> Nat Nat U))
(define mot-replace
  (lambda (n k)
    (= Nat (add1 k) (add1 (add1 (double n))))))

(claim step-twice=double
  (Pi ((n-1 Nat))
    (-> (mot-twice=double n-1)
        (mot-twice=double (add1 n-1)))))
(define step-twice=double
  (lambda (n-1)
    (lambda (proof-so-far)
      (replace (add1+=+add1 n-1 n-1)
        (mot-replace n-1)
        (cong proof-so-far (+ 2))))))

(claim twice=double
  (Pi ((n Nat))
    (= Nat (twice n) (double n))))
(define twice=double
  (lambda (n)
    (ind-Nat
      n
      mot-twice=double
      (same zero)
      step-twice=double)))

(claim mot-double-Vec
  (-> U Nat U))
(define mot-double-Vec
  (lambda (E)
    (lambda (l)
      (-> (Vec E l)
          (Vec E (double l))))))

(claim base-double-Vec
  (Pi ((E U))
    (mot-double-Vec E zero)))
(define base-double-Vec
  (lambda (E)
    (lambda (es)
      vecnil)))

(claim step-double-Vec
  (Pi ((E U)
       (n-1 Nat))
    (-> (mot-double-Vec E n-1)
        (mot-double-Vec E (add1 n-1)))))
(define step-double-Vec
  (lambda (E n-1)
    (lambda (double-Vec-so-far)
      (lambda (es)
        (vec:: (head es)
          (vec:: (head es)
            (double-Vec-so-far (tail es))))))))

(claim double-Vec
  (Pi ((E U)
       (l Nat))
    (-> (Vec E l)
        (Vec E (double l)))))
(define double-Vec
  (lambda (E l)
    (ind-Nat
      l
      (mot-double-Vec E)
      (base-double-Vec E)
      (step-double-Vec E))))

(claim twice-Vec
  (Pi ((E U)
       (l Nat))
    (-> (Vec E l)
        (Vec E (twice l)))))
(define twice-Vec
  (lambda (E l)
    (lambda (es)
      (replace
        (symm (twice=double l))
        (lambda (k) (Vec E k))
        (double-Vec E l es)))))
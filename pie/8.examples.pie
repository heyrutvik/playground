#lang pie

(claim +
  (-> Nat Nat Nat))
(define +
  (lambda (n m)
    (iter-Nat
      n
      m
      (lambda (+-so-far)
        (add1 +-so-far)))))

(claim incr
  (-> Nat Nat))
(define incr
  (lambda (n)
    (iter-Nat
      n
      1
      (+ 1))))

(claim +1=add1
  (Pi ((n Nat))
    (= Nat (+ 1 n) (add1 n))))
(define +1=add1
  (lambda (n)
    (same (add1 n))))



(claim mot-incr=add1
  (-> Nat U))
(define mot-incr=add1
  (lambda (n)
    (= Nat (incr n) (add1 n))))

(claim base-incr=add1
  (= Nat (incr zero) (add1 zero)))
(define base-incr=add1
  (same (add1 zero)))

(claim step-incr=add1
  (Pi ((n-1 Nat))
    (-> (= Nat (incr n-1) (add1 n-1))
        (= Nat (add1 (incr n-1)) (add1 (add1 n-1))))))
(define step-incr=add1
  (lambda (n-1)
    (lambda (incr=add1-so-far)
      (cong incr=add1-so-far (+ 1)))))

(claim incr=add1
  (Pi ((n Nat))
    (= Nat (incr n) (add1 n))))
(define incr=add1
  (lambda (n)
    (ind-Nat
      n
      mot-incr=add1
      base-incr=add1
      step-incr=add1)))
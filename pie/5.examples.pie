#lang pie

(claim expectations (List Atom))
(define expectations
  (:: 'cooked
    (:: 'eaten
      (:: 'tried-cleaning
        (:: 'understood
          (:: 'slept nil))))))

(claim step-length
  (Pi ((E U))
    (-> E (List E) Nat
      Nat)))
(define step-length
  (lambda (E)
    (lambda (e es length-so-far)
      (add1 length-so-far))))

(claim length
  (Pi ((E U))
    (-> (List E)
      Nat)))
(define length
  (lambda (E)
    (lambda (es)
      (rec-List
        es
        0
        (step-length E)))))

(claim step-append
  (Pi ((E U))
    (-> E (List E) (List E)
      (List E))))
(define step-append
  (lambda (E)
    (lambda (e es append-so-far)
      (:: e append-so-far))))

(claim append
  (Pi ((E U))
    (-> (List E) (List E)
      (List E))))
(define append
  (lambda (E)
    (lambda (start end)
      (rec-List
        start
        end
        (step-append E)))))

(claim snoc
  (Pi ((E U))
    (-> (List E) E
      (List E))))
(define snoc
  (lambda (E)
    (lambda (es e)
      (rec-List
        es
        (:: e nil)
        (step-append E)))))

(claim step-concat
  (Pi ((E U))
    (-> E (List E) (List E)
      (List E))))
(define step-concat
  (lambda (E)
    (lambda (e es concat-so-far)
      (snoc E concat-so-far e))))

(claim concat
  (Pi ((E U))
    (-> (List E) (List E)
      (List E))))
(define concat
  (lambda (E)
    (lambda (start end)
      (rec-List
        end
        start
        (step-concat E)))))

(claim step-reverse
  (Pi ((E U))
    (-> E (List E) (List E)
      (List E))))
(define step-reverse
  (lambda (E)
    (lambda (e es reverse-so-far)
      (snoc E reverse-so-far e))))

(claim reverse
  (Pi ((E U))
    (-> (List E)
      (List E))))
(define reverse
  (lambda (E)
    (lambda (es)
      (rec-List
        es
        (the (List E) nil)
        (step-reverse E)))))
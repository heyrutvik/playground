#lang pie

;; --- from last chapter start --- 

;; consequences of comparing different combinations of Nats
(claim =consequence
  (-> Nat Nat U))
(define =consequence
  (lambda (n m)
    (which-Nat
      n
      (which-Nat
        m
        Trivial
        (lambda (m-1)
          Absurd))
      (lambda (n-1)
        (which-Nat
          m
          Absurd
          (lambda (m-1)
            (= Nat n-1 m-1)))))))

;; consequences of comparing same Nat
;; rules out absurd possibilities
(claim =consequence-same
  (Pi ((n Nat))
    (=consequence n n)))
(define =consequence-same
  (lambda (n)
    (ind-Nat
      n
      (lambda (k)
        (=consequence k k))
      sole
      (lambda (n-1 cs)
        (same n-1)))))

;; consequences of comparing any Nat
;; aka use-Nat=
(claim =consequence-any
  (Pi ((n Nat)
       (m Nat))
    (-> (= Nat n m)
        (=consequence n m))))
(define =consequence-any
  (lambda (n m)
    (lambda (n=m)
      (replace
        n=m
        (lambda (k)
          (=consequence n k))
        (=consequence-same n)))))

;; if zero is (add1 n) then anything 
(claim zero-not-add1
  (Pi ((n Nat))
    (-> (= Nat zero (add1 n))
        Absurd)))
(define zero-not-add1
  (lambda (n)
    (=consequence-any zero (add1 n))))

;; if (add1 n) is (add1 m) then n is m
(claim sub1=
  (Pi ((n Nat)
       (m Nat))
    (-> (= Nat (add1 n) (add1 m))
        (= Nat n m))))
(define sub1=
  (lambda (n m)
    (=consequence-any (add1 n) (add1 m))))

;; --- from last chapter end --- 

;; given statement is decidable
(claim Dec
  (-> U U))
(define Dec
  (lambda (X)
    (Either
      X
      (-> X Absurd))))

;; for every n, it's decidable that n is zero or isn't 
(claim zero?
  (Pi ((n Nat))
    (Dec (= Nat zero n))))
(define zero?
  (lambda (n)
    (ind-Nat
      n
      (lambda (j)
        (Dec (= Nat zero j)))
      (left (same zero))
      (lambda (n-1 zero?-n-1)
        (right (zero-not-add1 n-1))))))

;; for every n and m, it's decidable that n is m or isn't

;; motive for nat=?
;; for every j, it's decidable that j is target or isn't
(claim mot-nat=?
  (-> Nat U))
(define mot-nat=?
  (lambda (n)
    (Pi ((j Nat))
      (Dec (= Nat n j)))))

(claim add1-not-zero
  (Pi ((n Nat))
    (-> (= Nat (add1 n) zero)
        Absurd)))
(define add1-not-zero
  (lambda (n)
    (=consequence-any (add1 n) zero)))

(claim +
  (-> Nat Nat Nat))
(define +
  (lambda (n m)
    (iter-Nat
      n
      m
      (lambda (+-so-far)
        (add1 +-so-far)))))

(claim dec-add1=
  (Pi ((n-1 Nat)
       (m-1 Nat))
    (-> (Dec (= Nat n-1 m-1))
        (Dec (= Nat (add1 n-1) (add1 m-1))))))
(define dec-add1=
  (lambda (n-1 m-1 eq-or-not)
    (ind-Either
      eq-or-not
      (lambda (t)
        (Dec (= Nat (add1 n-1) (add1 m-1))))
      (lambda (yes)
        (left (cong yes (+ 1))))
      (lambda (no)
        (right
          (lambda (n=m)
            (no (sub1= n-1 m-1 n=m))))))))

(claim step-nat=?
  (Pi ((n-1 Nat))
    (-> (mot-nat=? n-1)
        (mot-nat=? (add1 n-1)))))
(define step-nat=?
  (lambda (n-1)
    (lambda (nat=?-n-1)
      (lambda (j)
        (ind-Nat
          j
          (lambda (k)
            (Dec (= Nat (add1 n-1) k)))
          (right
            (add1-not-zero n-1))
          (lambda (j-1 nat=?-j-1)
            (dec-add1= n-1 j-1 (nat=?-n-1 j-1))))))))

(claim nat=?
  (Pi ((n Nat)
       (m Nat))
    (Dec
     (= Nat n m))))
(define nat=?
  (lambda (n m)
    ((ind-Nat
      n
      mot-nat=?
      zero?
      step-nat=?) m)))
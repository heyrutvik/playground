#lang pie

(claim six Nat)
(define six
  (add1 (add1 (add1 (add1 (add1 (add1 zero)))))))

(claim name Atom)
(define name 'john)

(claim surname Atom)
(define surname 'doe)

(claim name-or-surname (-> Nat Atom))
(define name-or-surname
  (lambda (n)
    (which-Nat n name (lambda (n-1) surname))))

(claim Pear U)
(define Pear
  (Pair Nat Nat))

(claim Pear-maker U)
(define Pear-maker (-> Nat Nat Pear))

(claim elim-Pear (-> Pear Pear-maker Pear))
(define elim-Pear
  (lambda (pear maker)
    (maker (car pear) (cdr pear))))

(claim replace-elem (-> Nat Nat Pear))
(define replace-elem (lambda (a d) (cons d a)))
(elim-Pear (cons 1 2) replace-elem)

(claim add1-elem (-> Nat Nat Pear))
(define add1-elem (lambda (a d) (cons (add1 a) (add1 d))))
(elim-Pear (cons 1 2) add1-elem)
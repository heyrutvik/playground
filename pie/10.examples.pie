#lang pie

;; list to dependent product of length of list and vector of that length
(claim base-list->vec-1
  (Pi ((E U))
    (Sigma ((l Nat))
           (Vec E l))))
(define base-list->vec-1
  (lambda (E)
    (cons 0 vecnil)))

(claim list->vec-1
  (Pi ((E U))
    (-> (List E)
        (Sigma ((l Nat))
          (Vec E l)))))
(define list->vec-1
  (lambda (E es)
    (rec-List
      es
      (base-list->vec-1 E)
      (lambda (x xs list->vec-1-so-far)
        (cons (add1 (car list->vec-1-so-far))
          (vec:: x (cdr list->vec-1-so-far)))))))

;; length of list
(claim length
  (Pi ((E U))
    (-> (List E) Nat)))
(define length
  (lambda (E es)
    (rec-List
      es
      zero
      (lambda (x xs length-so-far)
        (add1 length-so-far)))))

;; take element and number and create vector of that length with same element
(claim mot-replicate
  (-> U Nat U))
(define mot-replicate
 (lambda (E)
   (lambda (n)
    (Vec E n))))

(claim step-replicate
  (Pi ((E U) (e E) (n-1 Nat))
    (-> (mot-replicate E n-1)
        (mot-replicate E (add1 n-1)))))
(define step-replicate
  (lambda (E e n-1 step-replicate-so-far)
    (vec:: e step-replicate-so-far)))

(claim replicate
  (Pi ((E U) (n Nat))
    (-> E (Vec E n))))
(define replicate
  (lambda (E n e)
    (ind-Nat
      n
      (mot-replicate E)
      vecnil
      (step-replicate E e))))


;; list to vector
(claim mot-list->vec
  (Pi ((E U))
    (-> (List E) U)))
(define mot-list->vec
  (lambda (E es)
    (Vec E (length E es))))

(claim step-list->vec
  (Pi ((E U) (e E) (es (List E)))
    (-> (mot-list->vec E es)
        (mot-list->vec E (:: e es)))))
(define step-list->vec
  (lambda (E e es list->vec-so-far)
    (vec:: e list->vec-so-far)))

(claim list->vec
  (Pi ((E U) (es (List E)))
    (Vec E (length E es))))
(define list->vec
  (lambda (E es)
    (ind-List
      es
      (mot-list->vec E)
      vecnil
      (step-list->vec E))))
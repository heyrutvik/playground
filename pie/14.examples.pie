#lang pie

(claim Maybe
  (-> U U))
(define Maybe
  (lambda (E)
    (Either E Trivial)))

(claim nothing
  (Pi ((E U))
    (Maybe E)))
(define nothing
  (lambda (E)
    (right sole)))

(claim just
  (Pi ((E U))
    (-> E
      (Maybe E))))
(define just
  (lambda (E e)
    (left e)))

;; for list

(claim step-maybe-head
  (Pi ((E U))
    (-> E (List E) (Maybe E)
        (Maybe E))))
(define step-maybe-head
  (lambda (E e es maybe-head-so-far)
    (just E e)))

(claim maybe-head
  (Pi ((E U))
    (-> (List E)
      (Maybe E))))
(define maybe-head
  (lambda (E es)
    (rec-List
      es
      (nothing E)
      (step-maybe-head E))))

(claim step-maybe-tail
  (Pi ((E U))
    (-> E (List E) (Maybe (List E))
        (Maybe (List E)))))
(define step-maybe-tail
  (lambda (E e es maybe-tail-so-far)
    (just (List E) es)))

(claim maybe-tail
  (Pi ((E U))
    (-> (List E)
        (Maybe (List E)))))
(define maybe-tail
  (lambda (E es)
    (rec-List
      es
      (nothing (List E))
      (step-maybe-tail E))))

(claim step-maybe-ref
  (Pi ((E U))
    (-> Nat (-> (List E) (Maybe E))
      (-> (List E) (Maybe E)))))
(define step-maybe-ref
  (lambda (E)
    (lambda (n-1 maybe-ref-so-far)
      (lambda (es)
        (ind-Either
          (maybe-tail E es)
          (lambda (t) (Maybe E))
          (lambda (l)
            (maybe-ref-so-far l))
          (lambda (r)
            (nothing E)))))))

(claim maybe-ref
  (Pi ((E U))
    (-> Nat
      (-> (List E)
        (Maybe E)))))
(define maybe-ref
  (lambda (E n)
    (rec-Nat
      n
      (maybe-head E)
      (step-maybe-ref E))))


;; for vector

(claim Fin
  (-> Nat U))
(define Fin
  (lambda (n)
    (iter-Nat
      n
      Absurd
      Maybe)))

(claim fzero
  (Pi ((n Nat))
    (Fin (add1 n))))
(define fzero
  (lambda (n)
    (nothing (Fin n))))

(claim fadd1
  (Pi ((n Nat))
    (-> (Fin n)
        (Fin (add1 n)))))
(define fadd1
  (lambda (n)
    (lambda (fin-n-1)
      (just (Fin n) fin-n-1))))

(claim mot-vec-ref
  (Pi ((E U))
    (-> Nat U)))
(define mot-vec-ref
  (lambda (E)
    (lambda (k)
        (-> (Fin k) (Vec E k) E))))

(claim step-vec-ref
  (Pi ((E U)
       (l-1 Nat))
    (-> (mot-vec-ref E l-1)
        (mot-vec-ref E (add1 l-1)))))
(define step-vec-ref
  (lambda (E l-1)
    (lambda (step-vec-ref-l-1)
      (lambda (fin-l vs)
        (ind-Either
          fin-l
          (lambda (t)
            E)
          (lambda (fin-l-1)
            (step-vec-ref-l-1 fin-l-1 (tail vs)))
          (lambda (triv)
            (head vs)))))))

(claim vec-ref
  (Pi ((E U)
       (l Nat))
    (-> (Fin l) (Vec E l) E)))
(define vec-ref
  (lambda (E l)
    (ind-Nat
      l
      (mot-vec-ref E)
      (lambda (fin-zero vs)
        (ind-Absurd fin-zero
          E))
      (step-vec-ref E))))
